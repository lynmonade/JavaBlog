# 字符串（一）字符集与编码
首先推荐两个博客系列，也就是**Reference**中的第一、第二篇参考博客。这个系列的博客也是在它们的基础上提炼完善的。

## 字符集与编码
charset是字符集，而encoding是字符集编码，或者简称编码。字符集与编码的关系就好比接口与实现类的关系。字符集类相当于接口，它定义了字符集合中有哪些字符可以用（要做什么）。而编码类相当于实现类，定义了如何表示和存储字符。

## 码点code point
码点其实就是一个数字，每个字符对应一个数字。而编码其实就是对这个数字用一定的格式表示出来，具体采用哪种格式与编码格式有关。

## Unicode与UTF
Unicode的定义：Unicode给每个字符提供了一个唯一的数字，无论是什么平台、无论是什么程序、无论是什么语言。

Unicode的核心就是为每个字符提供唯一一个数字编号。Unicode provides a unique number for every character。

unicode的码点范围是U+0000~U+10FFFF。大概可容纳111万左右个字符。

Unicode有17个平面，第一个平面是BMP，即基本平面：（Basic Multilingual Plane 基本多语言平面），剩余的16个平面都是辅助平面SP（Supplementary Planes）。英文字符和常用的中文字符都在基本平面中。特殊字符和保留位则在辅助平面中。基本平面可以容纳256*256个字符，范围是U+0000~U+FFFF。平时基本上也只用到BMP里的字符。

有时会提到**Unicode编码**，其本质上涉及两个层面：

1. 抽象编码层面:把一个字符编码到一个数字（不涉及每个数字用几个字节表示，是用定长还是变长表示等具体细节）
2. 具体编码层面:即UTF，把抽象编码层面的数字编码成最终的存储形式，需要明确是用定长还是变长；定长的话定几个字节；用变长的话有哪几种字节长度，具体如何去实现等等。（注：在上一层面，字符与数字已经实现一一对应，对数字编码实质就是对字符编码）

![Unicode编码的两个层面](http://static.oschina.net/uploads/space/2014/0820/222426_U0BC_1772009.jpg)


## Unicode编码格式
Unicode把最终的具体编码称为UTF(Unicode Transformation Format)，即所谓的Unicode转换格式(编码格式)。Unicode编码格式包括：UTF-8，UTF-16，UTF-32。

关于如何把Unicode码点用UTF-X来表示，可以参考[这篇](https://my.oschina.net/goldenshaw/blog/310331)。

### UTF-8
UTF-8是变长的编码格式，长度可能为1字节、2字节、3字节、4字节。并且兼容ASCII字符集，对于ASCII字符采用1个字节表示。而对于常用中文来说，则使用3个字节表示。用UTF-8编码的中文一般都以E开头（十六进制）。

### UTF-16
UTF-16也是变长的编码格式，长度为2字节或者4字节。对于BMP中的字符，都用2字节表示，而SP平面中的字符则用4字节表示。

### UTF-32
UTF-32是定长的编码格式，长度为4字节。所有Unicode字符都是用4个字节来表示。

## 代码单元Code Unit
代码单元指一种转换格式（UTF）中最小的一个分隔，称为一个代码单元（Code Unit），因此，一种转换格式只会包含整数个单元。

1. UTF-8的8指的就是最小为8位一个单元，也即一字节为一个单元，UTF-8可以包含一个单元，二个单元，三个单元及四个单元，对应即是一，二，三及四字节。
2. UTF-16的16指的就是最小为16位一个单元，也即两字节为一个单元，UTF-16可以包含一个单元和两个单元，对应即是两个字节和四个字节。我们操作UTF-16时就是以它的一个单元为基本单位的。
3. 同理，UTF-32以32位一个单元，它只包含这一种单元就够了，它的一单元自然也就是四字节了。

`String.length()`方法返回的是代码单元的长度，由于Java里的String在内存中是以UTF-16编码的，所以length()就是该字符串使用UTF-16编码后的代码单元个数。

对于一个ASCII字符、常见中文来说，其代码单元长度是1，因为UTF-16使用2字节/16bit（一个代码单元）来表示。对于SP平面的字符，其代码单元长度是2，因为UTF-16使用4字节/32bit（2个代码单元）来表示。

## 关于\u
\uXXXXXX是Unicode字符对应的码点的十六进制表示形式，\u是转义符。规定至少要有4个X，不够则高位补0，最多可以有6个X。

## 其他编码
**GBK**是中文的编码格式，采用变长编码方案，兼容ASCII，对于ASCII字符采用1字节保存，对于中文则采用2字节保存。

ASCII是英文的编码格式，采用定长编码方案，长度为1字节。最高位永远都是0。

ISO-8859-1是英文和西欧文字的编码格式，采用定长的编码方案，长度为1字节，兼容ASCII。

## BOM



## 数据类型
bit是位，只有两个值：0和1。byte是字节，一个byte就是一个字节，其范围是-128~127。

char用来表示Unicode字符，由于Java的String在内存中用UTF-16表示，因此一个char的包含两个byte，其范围是0~256*256-1。对于BMP平面的字符，使用一个char来表示即可。对于SP平面的字符，则必须用char[]数组表示，char数组中容纳两个char，因为4个byte足以表示所有SP平面的字符。

例如，字母A在unicode码表的值，十进制表示是65，十六进制表示是41。41就是字符A的code point值。UTF-16使用一个char来表示：U+0041。下面两个例子都表示字符A。

```java
char c1 = 'A';
char c2 = '\u0041';
System.out.println(c1); //A
System.out.println(c2); //A
```

如果想要表示辅助平面的字符，则必须要用char[]。比如数学字符Z的code point=U+1D56B。UTF-16使用两个char来表示：U+D835，U+DD6B。

```java
char[] c1 = {'\uD835','\uDD6B'};
System.out.println(c1);
```






# Reference
* [字符集与编码](https://my.oschina.net/goldenshaw/blog?catalog=536953)
* [文本在内存中的编码](https://my.oschina.net/goldenshaw/blog?catalog=3294521)