# 数理知识（1）基本数据类型
## 整型/整数
* byte：占1个字节(8bit)。范围是[-128,127]
* short：占2个字节(16bit)。范围是[-32768,32767]
* int：占4个字节(32bit)。范围是[-2147483648,2147483647]
* long:占8个字节(64bit)。范围是[-9223372036854775808,9223372036854775807]

对于不同的计算机，无论是32位，还是64位的计算机、操作系统，java的基本数据类型的存储方式和范围都是一致不变的。在给整型变量赋值时，一定要注意，该类型的整型变量是否能容纳这个值。

我们可以使用4种方式表示整型字面量：

* 十进制：直接写字面量
* 十六进制：以0x或0X开头
* 二进制：以0b或0B开头，低位在右边，高位在左边
* 八进制：以0开头

```java
byte number10 = 10;
short number16 = 0X100;
int number2 = 0B011;
int number8 = 011;
		
//System.out.println()会把变量转为十进制来打印
System.out.println(number10); //10
System.out.println(number16); //256
System.out.println(number2); //3
System.out.println(number8); //9
```

日常生活中我们也可以使用,来分隔长数字，以此来提供长数字的可读性，比如10,3232,4545,6776。在java中，我们可以使用_来分隔长数字。

```java
long longValue = 10_3232_4545_6776L;//long类型一般以L结尾，以此来区别于int类型
System.out.println(longValue); //10323245456776
```

## 浮点型/浮点数
* float：占4个字节，大概可以精确到小数点后7位。必须在数字后面加上f或F来表示float类型。
* double：占8个字节，大概可以精确到小数点后18位。java默认使用double来表示小数。

浮点数同样可以像整数一样用_来分隔表示。我们还可以通过写成指数形式，在小数后面添加一个e或E，后面跟着10的指数次幂。此外浮点数也能使用“加加减减”运算符，也能进行取余运算。

```java
long v1 = 149600000;
double v2 = 1.496E8;
System.out.println(v1==v2); //true
		
double v3 = 0.0000000009;
double v4 = 9.0e-10;
System.out.println(v3==v4); //true
```

建议在开发时使用double来表示浮点数，不要使用float。原因请看[此贴10楼](http://bbs.csdn.net/topics/350238042)

>记住java一定要用double，更鼓不变，就算数值不大也要用double。
>了解java虚拟机的底层会知道，float放在内存中其实是当作double来处理的，它不会比double更节约内存资源，对应的double虚拟机会直接以double形式来进行处理，快速而且精度高，但是如果用float，不但不会节约内存资源，虚拟机为了校验float的精度，会花费更多的系统资源，例如cpu时钟，程序执行步骤等等。
>相对于这点，整数类型，能用int就用int，不要用什么short类型，道理是一样，其实虚拟机中short,char,boolean,byte在内存中都是以int形式来处理的，为了校验精度，虚拟机还会付出格外的开销，这样其实得不偿失，不要自作聪明以为节约了内存，其实错了。当然long类型例外，虽然long类型也会增加资源的开销，但是毕竟能完成int完成不了的功能。
>还有，其实这些资源的开销对于整个应用程序和现有硬件资源而言就是九牛一毛，微乎其微，没有必要过于在意。就用习惯的形式即可。不要自作聪明的用特别的数据类型，浮点就double，整形就int，长整型就long，其它的必要性都不大(byte的话，用来做数组还是很方便的，除此不推荐使用)

### 浮点数与0比较
```java
float f0 = 0.33f + 0.33f;
System.out.println(f0); //0.66
System.out.println(f0 - 0.66f == 0.0f); //true
	
float f1 = 0.33f * 0.2f;
System.out.println(f1 - 0.066f == 0.0f); //false
System.out.println(f1); //0.06600001
		
double d0 = 0.33d + 0.33d;
System.out.println(d0); //0.66
System.out.println(d0 - 0.66d == 0.0d); //true
		
double d1 = 0.33d * 0.2d;
System.out.println(d1); //0.066
System.out.println(d1 - 0.066d == 0.0d); //true
```

## boolean类型
布尔类型只有两个值：false和true。布尔类型和整型不能互相转换。

## char类型
char类型占两个字节。一个char可以用来表示Unicode基本平面的字符。如果要表示Unicode辅助平面的字符，则必须用两个char(char数组)。char字符需要用单引号括起来，如果要用unicode的codePoint值来表示某一个字符，则必须用\u或者\U开头。

```java
char c = '\u0041';  //字符A的unicode码点值的十六进制值是41
System.out.println(c); //A
```

## 除法运算
java的除法运算与数学上的除法运算是一样的，对于x/y，x是“被除数”，y是“除数”：

* 如果|x|<|y|，则结果为0。
* 如果|x|>|y|，当x与y同符号，则结果为正，当x与y不同符号，则结果为负。

```java
//|x|>|y|
int a = 7/3; //2 ++ |x|>|y|
int b = -7/-3; //2 -- |x|>|y|
int c = 7/-3; //-2 +- |x|>|y|
int d = -7/3; //-2 -+ |x|>|y|
System.out.println("a="+a+",b="+b+",c="+c+",d="+d);

//|x|<|y|
int e = 3/7; //0 ++ |x|<|y| 
int f = -3/-7; //0 -- |x|<|y|
int g = 3/-7; //0 +- |x|<|y|
int h = -3/7; //0 -+ |x|<|y|
System.out.println("e="+e+",f="+f+",g="+g+",h="+h);
		
//int的最小值是-2147483648，除以-1正常来说应该等于2147483648
//但由于int的最大值是2147483647，所以java不知所措，只能让其值不变
int i = -2147483648;
int j = i/-1; //依然是-2147483648
System.out.println(j);
```

## 取余运算
取余运算与乘法、除法运算符具有同样的优先级。对于x%y来说：

* 当|x|>|y|，余数的绝对值等于数学意义上的余数，并且其符号与x的符号相同。
* 当|x|<|y|，则余数等于x本身。

```java
//|x|>|y|
int a = 7%3; //1 ++ |x|>|y|
int b = -7%-3; //-1 -- |x|>|y|
int c = 7%-3; //1 +- |x|>|y|
int d = -7%3; //-1 -+ |x|>|y|
System.out.println("a="+a+",b="+b+",c="+c+",d="+d);
		
//|x|<|y|
int e = 3%7; //3 ++ |x|<|y|
int f = -3%-7; //-3 -- |x|<|y|
int g = 3%-7; //3 +- |x|<|y|
int h = -3%7; //-3 -+ |x|<|y|
System.out.println("e="+e+",f="+f+",g="+g+",h="+h);
```

##加加减减
* ++a是前缀形式（prefix form），它表示先对a执行+1操作，然后在执行其他操作。
* a++是后缀形式(postfix form)，它表示先执行其他操作，然后再对a执行+1操作。

无论是++a还是a++，a的值最终都会变化，最终都会+1，即a=a+1。

```java
int a = 10;
int b = 10;
int c = 20;
int d = ++a + c; //31
int e = b++ + c; //30
System.out.println("d="+d+",e="+e);
System.out.println("a="+a); //11
System.out.println("b="+b); //11
```

## 整数运算，浮点数运算
不同类型的整数运算会存在一些隐式地自动转化过程，因此也需要我们自行处理类型转换。

```java
/*
 * 对于byte和short类型，编译器会先转为int类型，再进行运算，
 * 因此得到的值也是int类型，所以需要强制类型转换
 * */
short a = 2;
short b = 3;
short c= (short)(a*b);
byte d = 2;
byte e = 3;
byte f = (byte)(d*e);
System.out.println("c="+c+",f="+f);
		
/*
 * 对于long类型，由于其范围比int大，因此编译器自动把int转为long之后再进行运算
 * 得到的结果也是long类型，所以需要强制类型转换
 * */
long g = 2L;
long h = 3L;
int i = 2;
long j = 3L;
		
long k = g*h;
int m = (int)(g*h);
long n = j*k;
int p = (int)(j*k);

//对于浮点数运算，其结果也会转成范围较大的类型
double d1 = 2.2;
float f1 = 2.0f;
float x = (float)(d1/f1); //1.1
double y = d1/f1; //1.1
System.out.println("x="+x+",y="+y); //1.1
```

从上面可以看出，不同类型的数据进行四则运算时，其结果类型是范围最大的那个类型，具体的规则如下，按顺序匹配规则，匹配成功后不再继续匹配：

1. 如果其中一个操作数为double类型，则编译器在运算之前将另一个数转换为double类型。
2. 如果其中一个操作数为float类型，则编译器在运算之前将另一个数转换为float类型。
3. 如果其中一个操作数为long类型，则编译器在运算之前将另一个数转换为long类型。

>byte-->short-->int-->long-->float>-->double

如果把左边类型的变量赋值给右边类型的变量，java会自动进行类型转换，因为左边的变量类型更窄，把它们赋值到右边的变量类型(较宽)没有任何问题，但需要特别注意的是，long转赋值到float时，必须考虑float的最大值，因为long占8个字节，而float占4个字节。

如果把右边类型的变量赋值给左边类型的变量，则必须显式地进行强制类型转换，且需要考虑进度丢失的风险。

### 不带后缀的整数
对于不带后缀的整数，编译器会默认为是int类型，因此需要注意这个整数不要超过int的范围。此外，还需注意除法的问题：

```java
/**
由于1和3都不带后后缀，因此默认为int类型，根据除法运算符的规则，结果等于0，并且也是int类型。
接着需要把结果赋值到double变量上，因此自动转为0.0
*/
double d1 = 1/3; //d1=0.0

 
/**
由于被除数和除数都带后缀，因此它们表示“显式地指定被除数和除数都是double类型”
所以除法结果也是double类型，非常精确
*/
double d2 = 1d/3d; //d2=0.3333333333333333

double d3 = 100000000000000000000/3; //报错，被除数超过int的最大范围

double d3 = 100000000000000000000L/3; //正确，我们显式地指定被除数为long类型，long足以容纳被除数
```

## 运算溢出
```java
int i = Integer.MAX_VALUE;
System.out.println(i*4); //-4，结果值超过了int的范围
```

## 逻辑运算
* &表示**与**。&左右两边的表达式都会执行。
* |表示**或**。|左右两边的表达式都会执行。
* ^表示**异或**。当两个表达式的值不相同(异)时，结果为true，当两个表达式的值相同时，结果为false。
* !表示**非**
* &&表示**短路与**。短路的意思是：只有当&&左边的表达式为true时，才会执行右边的表达式。
* ||表示**短路或**。短路的意思是：只有当||左边的表达式为false时，才会执行右边的表达式。

短路既满足了逻辑运算的要求，又有助于节约计算资源，因此推荐使用。但短路有时也会把一些bug隐藏起来，需要特别注意。

```java
int x=0;
int y=0;

//报错：java.lang.ArithmeticException
//因为x/y！=0
if(x!=0 & x/y!=0) //& 左右两边都会执行
	System.out.println("&");

//报错：java.lang.ArithmeticException
//因为x/y！=0
if(x!=0 | x/y!=0)  //| 左右两边都会执行
    System.out.println("|");

//不报错，也无输出，因为x!=0为false，因此x/y!=0永远不会执行
if(x!=0 && x/y!=0) 
    System.out.println("&&"); //&& 当左边为true时，才会执行右边

//报错：java.lang.ArithmeticException
//因为x/y！=0
if(x!=0 || x/y!=0) 
    System.out.println("||"); //|| 当左边为false时，才会执行右边
```

## 操作小结：
1. 算术运算符
2. 赋值运算符
3. 比较运算符
4. 逻辑运算符
5. 移位运算符
6. 类型转换casting

![操作符](http://wx1.sinaimg.cn/mw690/0065Y1avgy1fd1c452q79j30i20pvjvp.jpg)


## Random
Random类用于生产随机数，Random类有一个随机种子seed，随机数和种子之间的关系遵循一下规则：

* 种子不同，产生不同的随机数。
* 种子相同，即使Random实例不同也产生相同的随机数。

一般我们直接使用Random类的无参数构造函数就可以了，无需显式地指定随机种子。

```java
//产生一个随机的boolean值，值只能是true或false
boolean nextBoolean()

//产生一个随机的浮点数，范围是[0,1)
float nextFloat()
double nextDouble()

//产生一个随机的int，范围是int的范围[-2147483648,2147483647]
int nextInt()

//产生一个随机的int，范围是[0,n)
int nextInt(n)

//产生一个随机的long，范围是long的范围[-9223372036854775808,9223372036854775807]
int nextInt()

//Math类也有一个静态方法，生成double随机数，范围是[0,1)
//其实底层是转调random.nextDouble
double Math.random()
```



## 包装类
所有的包装类都重写了equals()方法，调用equals()方法会对其包装的值进行比较。

### Boolean
```
//构造Boolean（装箱）
Boolean(boolean b) //构造函数
static Boolean valueOf(boolean b) //推荐
static Boolean valueOf(String s) //推荐，大小写不敏感

//Boolean-->boolean：解析boolean（拆箱）
boolean booleanValue()

//Boolean/boolean-->String
String toString()
static String toString(boolean b)
```

### Integer
```java
静态成员变量
static int MAX_VALUE
static int MIN_VALUE

//构造Integer
Integer valueOf(int i)
static Integer valueOf(String s) //参数只能是整数形式，不然运行时会报错
Integer(int value)
Integer(String s) ////参数只能是整数形式，不然运行时会报错

//格式转换：Integer-->XXX
int intValue() //to int
short shortValue() //to short
long longValue() //to long
float floatValue() //to float
double doubleValue() //to double
static Integer valueOf(String s) //to String

//格式转换:String-->int
static int parseInt(String s) 

//显示转换：把int用二进制、八进制、十六进制表示
static String toBinaryString(int i)
static String toOctalString(int i)
static String toHexString(int i)
```

### 其他包装类
Byte,Short,Long,Float,Double和Integer的套路是一样的，具体可查API：

* 使用静态成员变量表示最大、最小值。
* 一个以基本类型作为参数的构造函数，一个以String作为参数的构造函数
* valueOf()是静态方法，可以把基本类型或String封装成对应的包装类
* xxxValue()是普通方法，可以把这个包装类转为具体的xxx基本类型
* parseXXX()是静态方法，可以接收String作为参数，并转为对应的基本类型
* toBinaryString(), toOctalString(), toHexString()，转为进制显示形式










